import { _RE_DEV_SY_, STORE_VIEW_MAP_KEY, USE_STORE_KEY } from "./static";
import type { State, StateFunc, Store, StoreViewMapType, StoreViewMapValue, Stores } from "./model";

/**
 * 给Comp组件的props上挂载的state属性数据做一层引用代理
 * @description 核心作用是找出SCU或者useMemo所需要的更新依赖的数据属性
 */
export function proxyStateHandler<S extends State>(
  stateMap: Map<keyof S, S[keyof S]>,
  innerUseStateSet: Set<keyof S>,
) {
  const store = new Proxy(stateMap, {
    get: (target: Map<keyof S, S[keyof S]>, key: keyof S, receiver: any) => {
      innerUseStateSet.add(key);
      /**
       * stateMap(即最新的状态数据Map-latestState)给出了resy生成的store内部数据的引用，
       * 这里始终能获取到最新数据
       * 同时兼容考虑Reflect的bug兼容写法
       */
      return receiver === store
        ? target.get(key)
        : Reflect.get(target, key, receiver);
    },
  } as ProxyHandler<Map<keyof S, S[keyof S]>>) as object as S;
  return store;
}

// view的多store的最新数据的处理
export function viewStoresToLatestState<S extends State>(stores: Stores<S>) {
  const latestStateTemp: { [key in keyof Stores<S>]: S } = {};
  for (const storesKey in stores) {
    if (Object.prototype.hasOwnProperty.call(stores, storesKey)) {
      latestStateTemp[storesKey] = mapToObject(getLatestStateMap(stores[storesKey]));
    }
  }
  return latestStateTemp;
}

// view的多个store的state更新处理
export function viewStoresStateUpdateHandle<S extends State>(
  state: { [key in keyof Stores<S>]: S },
  innerUseStateSet: Set<keyof S>,
  nextState: S,
  storesKey?: keyof Stores<S>,
) {
  const stateTemp: { [key in keyof Stores<S>]: S } = Object.assign({}, state);
  Object.keys(state).forEach(storesKeyItem => {
    if (storesKey === storesKeyItem) {
      stateTemp[storesKey] = proxyStateHandler(new Map(Object.entries(nextState)), innerUseStateSet)
    }
  });
  return stateTemp;
}

/**
 * map转object
 * @description 解决回调参数如果是map的proxy代理的话无法做扩展运算的问题
 */
export function mapToObject<S extends State>(map: Map<keyof S, S[keyof S]>): S {
  return [...map.entries()].reduce((obj, [key, value]) => ((obj as S)[key] = value, obj), {}) as S;
}

/**
 * object转map
 * @description 相较于简洁的object.entries方式效率更高
 */
export function objectToMap<S extends State>(obj: S) {
  const map = new Map<keyof S, S[keyof S]>();
  for (const key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      map.set(key, obj[key]);
    }
  }
  return map;
}

// 获取最新数据Map对象
export function getLatestStateMap<S extends State = {}>(store?: Store<S>) {
  if (!store) return new Map<keyof S, S[keyof S]>();
  return (
    (
      store[STORE_VIEW_MAP_KEY as keyof S] as StoreViewMapType<S>
    ).get("getStateMap") as StoreViewMapValue<S>["getStateMap"]
  )();
}

// store传的不是由resy本身的createStore创建产生的store的错误处理
export function storeErrorHandle<S extends State>(store: S) {
  if (_RE_DEV_SY_ && !store[USE_STORE_KEY as keyof S]) {
    throw new Error("The store parameter is not created by resty's createStore！");
  }
}

// 数据更新参数报错处理
export function updateDataErrorHandle<S extends State>(stateParams: Partial<S> | StateFunc<S>, funcName: string) {
  if (
    _RE_DEV_SY_ && (
      (
        Object.prototype.toString.call(stateParams) !== "[object Object]"
        && Object.prototype.toString.call(stateParams) !== "[object Function]"
      ) || (
        Object.prototype.toString.call(stateParams) === "[object Function]"
        && Object.prototype.toString.call((stateParams as StateFunc<S>)()) !== "[object Object]"
      )
    )
  ) {
    throw new Error(`The state parameter of ${funcName} is either an object or a function that returns an object!`);
  }
  if (
    _RE_DEV_SY_
    && Object.prototype.toString.call(stateParams) === "[object Object]"
    && (stateParams as Partial<S>)[USE_STORE_KEY as keyof S]
  ) {
    throw new Error(`The state parameter of ${funcName} is the store generated by createStore and has no update significance!`);
  }
}
